@page "/vehicledata/{RegistrationNumber}"
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager

<PageTitle>MOT Vehicle Data</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            @if (isLoading)
            {
                <p class="text-center"><em>Loading...</em></p>
            }
            else if (!isLoading && !string.IsNullOrEmpty(errorMessage))
            {
                <p class="text-danger">@errorMessage</p>
            }
            else if (vehicleData != null && vehicleData.Any())
            {
                foreach (var vehicle in vehicleData)
                {
                    <div class="card mb-3">
                        <div class="card-body">
                            <h3 class="mb-3 text-left" style="width: 100%;">
                                <strong><span class="highlight">@vehicle.Registration</span></strong>
                            </h3>
                            <h2 class="mb-3 text-left" model-header><strong>@vehicle.Model</strong></h2>
                            <div class="row">
                                <div class="col-md-6">
                                    <p><span class="text-muted">Make</span><br><strong>@vehicle.Make</strong></p>
                                </div>
                                <div class="col-md-6">
                                    <p><span class="text-muted">Colour</span><br><strong>@vehicle.PrimaryColour</strong></p>
                                </div>
                                @if (vehicle.MotTests?.Any() ?? false)
                                {
                                    var lastMot = vehicle.MotTests.FirstOrDefault();
                                    if (lastMot != null)
                                    {
                                        <div class="col-md-6">
                                            <p><span class="text-muted">MOT Valid until</span><br><strong>@lastMot.ExpiryDate</strong></p>
                                        </div>
                                        <div class="col-md-6">
                                            <p><span class="text-muted">Mileage at Last MOT</span><br><strong>@lastMot.OdometerValue @lastMot.OdometerUnit</strong></p>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="col-12">
                                        <p>No MOT tests have been conducted for this vehicle.</p>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            }
            else if (dataFetched)
            {
                <p class="text-center">No data available for this registration number.</p>
            }

            <NavLink class="nav-link text-left p-0" href="/">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Check another vehicle
            </NavLink>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string RegistrationNumber { get; set; }
    private List<Vehicle> vehicleData;
    private bool isLoading = false;
    private bool dataFetched = false;
    private string errorMessage;

    private void NavigateToHome()
    {
        NavigationManager.NavigateTo("/");
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadVehicleData();
    }

    private async Task LoadVehicleData()
    {
        isLoading = true;
        errorMessage = "";
        dataFetched = true;
        var request = new HttpRequestMessage(HttpMethod.Get,
            $"https://beta.check-mot.service.gov.uk/trade/vehicles/mot-tests/?registration={RegistrationNumber}");
        request.Headers.Add("Accept", "application/json+v6");
        request.Headers.Add("x-api-key", "fZi8YcjrZN1cGkQeZP7Uaa4rTxua8HovaswPuIno");
        request.Headers.Add("User-Agent", "BlazorApp");

        try
        {
            var client = ClientFactory.CreateClient();
            var response = await client.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                using var responseStream = await response.Content.ReadAsStreamAsync();
                vehicleData = await JsonSerializer.DeserializeAsync<List<Vehicle>>(responseStream,
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            }
            else
            {
                errorMessage = "Failed to retrieve data. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    public class RfrAndComment
    {
        [JsonPropertyName("text")]
        public string Text { get; set; }

        [JsonPropertyName("type")]
        public string Type { get; set; }
    }



    public class Vehicle
    {
        [JsonPropertyName("registration")]
        public string? Registration { get; set; }
        [JsonPropertyName("make")]
        public string? Make { get; set; }
        [JsonPropertyName("model")]
        public string? Model { get; set; }
        [JsonPropertyName("firstUsedDate")]
        public string? FirstUsedDate { get; set; }
        [JsonPropertyName("fuelType")]
        public string? FuelType { get; set; }
        [JsonPropertyName("primaryColour")]
        public string? PrimaryColour { get; set; }
        [JsonPropertyName("motTests")]
        public List<MotTest>? MotTests { get; set; }
    }

    public class MotTest
    {
        [JsonPropertyName("completedDate")]
        public string CompletedDate { get; set; }

        [JsonPropertyName("testResult")]
        public string TestResult { get; set; }

        [JsonPropertyName("expiryDate")]
        public string ExpiryDate { get; set; }

        [JsonPropertyName("odometerValue")]
        public string OdometerValue { get; set; }

        [JsonPropertyName("odometerUnit")]
        public string OdometerUnit { get; set; }

        [JsonPropertyName("motTestNumber")]
        public string MotTestNumber { get; set; }

        [JsonPropertyName("rfrAndComments")]
        public List<RfrAndComment> RfrAndComments { get; set; }
    }


}

